cd 进入目录

pwd 显示当前目录

git init 创建仓库

git add xx.txt 将xx.txt添加到暂存区（多次）

git commit -m "description" 将暂存区的文件提交到版本库（一次）

git status 查看仓库的状态

git diff xx.txt 查看修改了什么内容

git log 查看历史记录（简易版添加--pretty=oneline参数）

git reset --hard head^ 回退到上一个版本（head为当前版本，head^^为上上个版本，前100个版本为head~100，也可以写commit id）

git reflog 记录指令

git checkout -- xx.txt 
把xx.txt文件在工作区的修改全部撤销，这里有两种情况：
一种是xx.txt自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；
一种是xx.txt已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。
总之，就是让这个文件回到最近一次git commit或git add时的状态。

git reset head xx.txt把暂存区的修改撤销，并重新放回工作区

git rm xx.txt 然后 git commit 将文件从版本库中删除

git remote add origin git@server-name:path/repo-name.git（@github.com:BHBCSC/test.git)关联一个远程库

git push -u origin master 提交修改到远程库

git clone git@github.com:server-name:path/repo-name.git 从远程库克隆到本地

查看分支：git branch

创建分支：git branch <name>

切换分支：git checkout <name>

创建+切换分支：git checkout -b <name>

合并某分支到当前分支：git merge <name> （用--no-ff参数表示不用快速合并）

删除分支：git branch -d <name>（git log --graph 命令可以看到分支合并图。

有bug修复的时候，可以用git stash保存当前的工作区。然后在有bug的分支上创建临时分支，改完bug后回到工作分支。用git stash apply恢复（stash不删除，git stash pop删除）

开发一个新feature，最好新建一个分支。
如果要丢弃一个没有被合并过的分支，可以通过git branch -D <name>强行删除。

多人协作的工作模式
首先，可以试图用git push origin branch-name推送自己的修改；
如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并；
如果合并有冲突，则解决冲突，并在本地提交；
没有冲突或者解决掉冲突后，再用git push origin branch-name推送就能成功！
如果git pull提示“no tracking information”，则说明本地分支和远程分支的链接关系没有创建，用命令git branch --set-upstream-to origin/branch-name branch-name （同于git branch --track feature origin/feature或git branch -u origin/feature feature）

查看远程库信息，使用git remote -v；

本地新建的分支如果不推送到远程，对其他人就是不可见的；

从本地推送分支，使用git push origin branch-name，如果推送失败，先用git pull抓取远程的新提交；

在本地创建和远程分支对应的分支，使用git checkout -b branch-name origin/branch-name，本地和远程分支的名称最好一致；

建立本地分支和远程分支的关联，使用git branch --set-upstream branch-name origin/branch-name；

从远程抓取分支，使用git pull，如果有冲突，要先处理冲突。